(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol('react.element')
	    : 0xeac7;

	// react.createElement
	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'nateWang'
	    };
	    return element;
	};
	const RESERVED_PROPS = {
	    key: true,
	    ref: true,
	    __self: true,
	    __source: true
	};
	const hasValidKey = (config) => {
	    return config.key !== undefined;
	};
	const hasValidRef = (config) => {
	    return config.ref !== undefined;
	};
	const jsx = (type, conf, ...child) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    if (hasValidKey(conf)) {
	        key = `${conf.key}`;
	    }
	    if (hasValidRef(conf)) {
	        ref = `${conf.ref}`;
	    }
	    // handle jsx properties
	    for (const prop in conf) {
	        const val = conf[prop];
	        if (Object.hasOwnProperty.call(conf, prop) &&
	            !RESERVED_PROPS.hasOwnProperty.call(conf, prop)) {
	            props[prop] = val;
	        }
	        const childLength = child.length;
	        if (childLength) {
	            if (childLength === 1) {
	                props.children = child[0];
	            }
	            else {
	                props.children = child;
	            }
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = jsx;

	exports.ReactElement = ReactElement;
	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
