(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol('react.element')
	    : 0xeac7;

	// react source code here params (type, key, ref, self, source, owner, props)
	// self、source、 owner params are used development environments
	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'nateWang'
	    };
	    return element;
	};
	const RESERVED_PROPS = {
	    key: true,
	    ref: true,
	    __self: true,
	    __source: true
	};
	const hasValidKey = (config) => {
	    return config.key !== undefined;
	};
	const hasValidRef = (config) => {
	    return config.ref !== undefined;
	};
	const createElement = (type, conf, children) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    if (conf != null) {
	        if (hasValidRef(conf)) {
	            ref = conf.ref;
	        }
	        if (hasValidKey(conf)) {
	            key = '' + conf.key;
	        }
	        for (const prop in conf) {
	            if (Object.hasOwnProperty.call(conf, prop) &&
	                !Object.hasOwnProperty.call(RESERVED_PROPS, prop)) {
	                props[prop] = conf[prop];
	            }
	        }
	    }
	    const childLen = children.length;
	    if (childLen === 1) {
	        props.childLen = children;
	    }
	    else if (childLen > 1) {
	        const childArray = Array(childLen);
	        for (let i = 0; i < childLen; i++) {
	            childArray.push(children[i]);
	        }
	        props.children = childArray;
	    }
	    return ReactElement(type, key, ref, props);
	};

	// react
	var index = {
	    version: '0.0.0',
	    createElement: createElement
	};

	return index;

}));
